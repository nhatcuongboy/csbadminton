generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id             String        @id @default(cuid())
  email          String        @unique
  name           String
  role           Role          @default(PLAYER)
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  emailVerified  DateTime?
  image          String?
  password       String?
  accounts       Account[]
  sessions       AuthSession[]
  playerRecords  Player[]
  hostedSessions Session[]     @relation("HostedSessions")

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model AuthSession {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("auth_sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Session {
  id                 String        @id @default(cuid())
  name               String
  hostId             String
  numberOfCourts     Int           @default(2)
  sessionDuration    Int           @default(120)
  maxPlayersPerCourt Int           @default(8)
  requirePlayerInfo  Boolean       @default(true)
  status             SessionStatus @default(PREPARING)
  startTime          DateTime?
  endTime            DateTime?
  createdAt          DateTime      @default(now())
  updatedAt          DateTime      @updatedAt
  allowGuestJoin     Boolean       @default(true)
  allowNewPlayers    Boolean       @default(true)
  courts             Court[]
  matches            Match[]
  players            Player[]
  host               User          @relation("HostedSessions", fields: [hostId], references: [id])

  @@map("sessions")
}

model Player {
  id                 String        @id @default(cuid())
  sessionId          String
  userId             String?
  playerNumber       Int
  name               String?
  gender             Gender?
  level              Level?
  phone              String?
  preFilledByHost    Boolean       @default(false)
  confirmedByPlayer  Boolean       @default(false)
  currentWaitTime    Int           @default(0)
  totalWaitTime      Int           @default(0)
  matchesPlayed      Int           @default(0)
  status             PlayerStatus  @default(WAITING)
  currentCourtId     String?
  createdAt          DateTime      @default(now())
  updatedAt          DateTime      @updatedAt
  courtPosition      Int?
  desire             String?
  isGuest            Boolean       @default(true)
  isJoined           Boolean       @default(false)
  joinCode           String        @unique
  joinedAt           DateTime?
  levelDescription   String?
  qrCodeData         String?
  requireConfirmInfo Boolean       @default(false)
  matchPlayers       MatchPlayer[]
  currentCourt       Court?        @relation(fields: [currentCourtId], references: [id])
  session            Session       @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  user               User?         @relation(fields: [userId], references: [id])

  @@unique([sessionId, playerNumber])
  @@map("players")
}

model Court {
  id                 String         @id @default(cuid())
  sessionId          String
  courtNumber        Int
  courtName          String?
  status             CourtStatus    @default(EMPTY)
  currentMatchId     String?        @unique
  createdAt          DateTime       @default(now())
  updatedAt          DateTime       @updatedAt
  direction          CourtDirection @default(HORIZONTAL)
  preSelectedPlayers Json?
  currentMatch       Match?         @relation("CurrentMatch", fields: [currentMatchId], references: [id])
  session            Session        @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  matches            Match[]        @relation("CourtMatches")
  currentPlayers     Player[]

  @@unique([sessionId, courtNumber])
  @@map("courts")
}

model Match {
  id           String        @id @default(cuid())
  sessionId    String
  courtId      String
  status       MatchStatus   @default(IN_PROGRESS)
  startTime    DateTime      @default(now())
  endTime      DateTime?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  isDraw       Boolean?      @default(false)
  isExtra      Boolean       @default(false)
  notes        String?
  score        String?
  winnerIds    String?
  currentCourt Court?        @relation("CurrentMatch")
  players      MatchPlayer[]
  court        Court         @relation("CourtMatches", fields: [courtId], references: [id])
  session      Session       @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  @@map("matches")
}

model MatchPlayer {
  id       String @id @default(cuid())
  matchId  String
  playerId String
  position Int
  match    Match  @relation(fields: [matchId], references: [id], onDelete: Cascade)
  player   Player @relation(fields: [playerId], references: [id], onDelete: Cascade)

  @@unique([matchId, playerId])
  @@unique([matchId, position])
  @@map("match_players")
}

enum Role {
  HOST
  PLAYER
}

enum SessionStatus {
  PREPARING
  IN_PROGRESS
  FINISHED
}

enum Gender {
  MALE
  FEMALE
  OTHER
  PREFER_NOT_TO_SAY
}

enum Level {
  Y
  Y_PLUS
  TBY
  TB_MINUS
  TB
  TB_PLUS
  Y_MINUS
  K
}

enum PlayerStatus {
  WAITING
  PLAYING
  FINISHED
  READY
  INACTIVE
}

enum CourtStatus {
  EMPTY
  IN_USE
  READY
}

enum CourtDirection {
  HORIZONTAL
  VERTICAL
}

enum MatchStatus {
  IN_PROGRESS
  FINISHED
}
