// Script to create 12 random players for a specific session
const sessionId = "cmeejcmnl000l0q36twqkh3gf";
const apiUrl = "http://localhost:3002"; // Adjust port if needed

// Diverse Vietnamese names for players
const names = {
  male: [
    "Nguy·ªÖn VƒÉn Minh", "Tr·∫ßn ƒê·ª©c Th√†nh", "L√™ Ho√†ng Nam", "Phan VƒÉn H√πng",
    "V≈© Minh Tu·∫•n", "ƒê·∫∑ng Qu·ªëc Anh", "B√πi Th√†nh ƒê·∫°t", "Ho√†ng VƒÉn Long",
    "ƒêinh Minh H·∫£i", "L√Ω Quang D≈©ng", "Ph·∫°m Th√†nh Vinh", "Ng√¥ VƒÉn Kh√¥i"
  ],
  female: [
    "Nguy·ªÖn Th·ªã Lan", "Tr·∫ßn Th·ªã H∆∞∆°ng", "L√™ Th·ªã Mai", "Phan Th·ªã Linh",
    "V≈© Th·ªã Nga", "ƒê·∫∑ng Th·ªã Hoa", "B√πi Th·ªã Th·∫£o", "Ho√†ng Th·ªã Y·∫øn",
    "ƒêinh Th·ªã Thu", "L√Ω Th·ªã Kim", "Ph·∫°m Th·ªã H√†", "Ng√¥ Th·ªã V√¢n"
  ]
};

const genders = ["MALE", "FEMALE"];
const levels = ["Y_MINUS", "Y", "Y_PLUS", "TBY", "TB_MINUS", "TB", "TB_PLUS", "K"];
const levelDescriptions = {
  "Y_MINUS": "Y·∫øu h∆°n m·ª©c Y",
  "Y": "M·ª©c ƒë·ªô Y·∫øu",
  "Y_PLUS": "Y·∫øu h∆°n Trung b√¨nh - Y·∫øu",
  "TBY": "Trung b√¨nh - Y·∫øu",
  "TB_MINUS": "Trung b√¨nh y·∫øu",
  "TB": "Trung b√¨nh",
  "TB_PLUS": "Trung b√¨nh m·∫°nh",
  "K": "Kh√°"
};

// Generate random phone numbers
function generatePhoneNumber() {
  const prefixes = ["090", "091", "092", "093", "094", "095", "096", "097", "098", "099"];
  const prefix = prefixes[Math.floor(Math.random() * prefixes.length)];
  const number = Math.floor(Math.random() * 10000000).toString().padStart(7, '0');
  return prefix + number;
}

// Generate 12 diverse players
function generateRandomPlayers() {
  const players = [];
  
  for (let i = 1; i <= 12; i++) {
    const gender = genders[Math.floor(Math.random() * genders.length)];
    const nameList = gender === "MALE" ? names.male : names.female;
    const name = nameList[Math.floor(Math.random() * nameList.length)];
    const level = levels[Math.floor(Math.random() * levels.length)];
    
    const player = {
      playerNumber: i,
      name: name,
      gender: gender,
      level: level,
      levelDescription: levelDescriptions[level],
      phone: generatePhoneNumber(),
      requireConfirmInfo: Math.random() < 0.3 // 30% chance to require confirmation
    };
    
    players.push(player);
  }
  
  return players;
}

// Create players via API
async function createRandomPlayers() {
  try {
    console.log(`üöÄ Creating 12 random players for session: ${sessionId}`);
    
    const players = generateRandomPlayers();
    
    console.log("üìã Generated players:");
    players.forEach((player, index) => {
      console.log(`  ${index + 1}. ${player.name} (${player.gender}) - Level: ${player.level}`);
    });
    
    console.log("\nüîÑ Sending request to API...");
    
    const response = await fetch(`${apiUrl}/api/sessions/${sessionId}/players/bulk`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(players)
    });
    
    const result = await response.json();
    
    if (response.ok && result.success) {
      console.log("‚úÖ Players created successfully!");
      console.log(`üìä Created ${result.data.createdPlayers.length} players`);
      console.log("üéØ Player details:");
      
      result.data.createdPlayers.forEach((player, index) => {
        console.log(`  ${index + 1}. ${player.name} - Player #${player.playerNumber}`);
        console.log(`     Gender: ${player.gender}, Level: ${player.level}`);
        console.log(`     Phone: ${player.phone}`);
        console.log(`     Join Code: ${player.joinCode}`);
        console.log(`     ID: ${player.id}`);
        console.log("");
      });
    } else {
      console.error("‚ùå Failed to create players:");
      console.error("Response status:", response.status);
      console.error("Error:", result.message || result);
    }
    
  } catch (error) {
    console.error("üí• Error creating players:", error.message);
  }
}

// Node.js environment check
if (typeof fetch === 'undefined') {
  // Install node-fetch if not available
  console.log("üì¶ Installing node-fetch...");
  require('child_process').execSync('npm install node-fetch', { stdio: 'inherit' });
  global.fetch = require('node-fetch');
}

// Run the script
createRandomPlayers();
